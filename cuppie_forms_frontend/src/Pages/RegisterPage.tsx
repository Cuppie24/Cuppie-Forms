import { useForm } from "react-hook-form";
import { z } from "zod";
import apiAxios from "../api/axios.ts";
import axios from "axios";
import { zodResolver } from "@hookform/resolvers/zod";
import { useState } from "react";
import { Link } from "react-router-dom";

// üí° Zod-—Å—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const schema = z.object({
  username: z.string().min(1, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ").max(30, "–ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤"),
  email: z.string().email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email"),
  password: z.string().min(6, "–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤").max(100, "–ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤"),
});

type RegisterFormData = z.infer<typeof schema>;

export default function RegisterForm() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<RegisterFormData>({ resolver: zodResolver(schema) });

  const [responseMessage, setResponseMessage] = useState<string>("");
  const [isSuccess, setIsSuccess] = useState<boolean>(false);

  const onSubmit = async (data: RegisterFormData) => {
    try {
      const response = await apiAxios.post("/api/auth/register", data);

      if (response.status === 200 || response.status === 201) {
        setResponseMessage("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
        setIsSuccess(true);
      }
    } catch (err: any) {
      if (axios.isAxiosError(err)) {
        if (err.response?.status === 409) {
          setResponseMessage("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
        } else if (err.response?.status === 400) {
          setResponseMessage("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
        } else {
          setResponseMessage(`‚ùå –û—à–∏–±–∫–∞: ${err.response?.status}`);
        }
      } else {
        setResponseMessage("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.");
      }
      setIsSuccess(false);
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-[#121212] text-[#E0E0E0]">
      <div className="relative bg-[#1E1E1E] p-8 rounded-3xl shadow-xl max-w-md w-full">
        <h2 className="text-3xl font-bold text-center text-[#FF6B6B] mb-6">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-5">
          <div>
            <input
              {...register("username")}
              placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
              className="w-full p-4 border border-[#FF6B6B] rounded-xl bg-[#292929] text-white focus:ring-2 focus:ring-[#FF6B6B] placeholder-gray-400 transition-all"
            />
            {errors.username && (
              <p className="text-red-500 text-sm mt-1">{errors.username.message}</p>
            )}
          </div>

          <div>
            <input
              {...register("email")}
              placeholder="Email"
              className="w-full p-4 border border-[#FF6B6B] rounded-xl bg-[#292929] text-white focus:ring-2 focus:ring-[#FF6B6B] placeholder-gray-400 transition-all"
            />
            {errors.email && (
              <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>
            )}
          </div>

          <div>
            <input
              {...register("password")}
              placeholder="–ü–∞—Ä–æ–ª—å"
              type="password"
              className="w-full p-4 border border-[#FF6B6B] rounded-xl bg-[#292929] text-white focus:ring-2 focus:ring-[#FF6B6B] placeholder-gray-400 transition-all"
            />
            {errors.password && (
              <p className="text-red-500 text-sm mt-1">{errors.password.message}</p>
            )}
          </div>

          <button
            type="submit"
            disabled={isSubmitting}
            className="w-full p-4 bg-[#FF6B6B] text-white rounded-xl hover:bg-[#E04E4E] hover:shadow-lg transition-all duration-300 font-medium"
          >
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
          </button>
        </form>

        {responseMessage && (
          <div className={`mt-4 p-3 rounded-lg text-center ${isSuccess ? "bg-green-100/10" : "bg-red-100/10"}`}>
            <p className="text-sm" style={{ color: isSuccess ? "#4CAF50" : "#FF6B6B" }}>
              {responseMessage}
            </p>
          </div>
        )}

        <div className="flex items-center justify-center mt-6">
          <span className="text-gray-400">–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?</span>
          <Link to="/login" className="text-[#FF6B6B] hover:underline transition-all ml-2">–í–æ–π—Ç–∏</Link>
        </div>
      </div>
    </div>
  );
}
