@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient http;

<div class="flex items-center justify-center min-h-screen bg-[#121212] text-[#E0E0E0]">
    <div class="relative bg-[#1E1E1E] p-8 rounded-3xl shadow-xl max-w-md w-full">

        <h2 class="text-3xl font-bold text-center text-[#FF6B6B] mb-6">Регистрация</h2>

        <EditForm Model="registerDto" OnValidSubmit="OnSubmitBtnClick" FormName="create" Enhance class="space-y-5">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <InputText id="username" @bind-Value="registerDto.Username" placeholder="Имя пользователя"
                           class="w-full p-4 border border-[#FF6B6B] rounded-xl bg-[#292929] text-white focus:ring-2 focus:ring-[#FF6B6B] placeholder-gray-400 transition-all" />
                <ValidationMessage For="@(() => registerDto.Username)" class="text-red-500 text-sm mt-1 block" />
            </div>

            <div class="mb-3">
                <InputText id="email" @bind-Value="registerDto.Email" placeholder="Email"
                           class="w-full p-4 border border-[#FF6B6B] rounded-xl bg-[#292929] text-white focus:ring-2 focus:ring-[#FF6B6B] placeholder-gray-400 transition-all" />
                <ValidationMessage For="@(() => registerDto.Email)" class="text-red-500 text-sm mt-1 block" />
            </div>

            <div class="mb-3">
                <InputText id="password" @bind-Value="registerDto.Password" placeholder="Пароль" type="password"
                           class="w-full p-4 border border-[#FF6B6B] rounded-xl bg-[#292929] text-white focus:ring-2 focus:ring-[#FF6B6B] placeholder-gray-400 transition-all" />
                <ValidationMessage For="@(() => registerDto.Password)" class="text-red-500 text-sm mt-1 block" />
            </div>

            <button type="submit"
                    class="w-full p-4 bg-[#FF6B6B] text-white rounded-xl hover:bg-[#E04E4E] hover:shadow-lg transition-all duration-300 font-medium">
                Зарегистрироваться
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(responseMessage))
        {
            <div class="mt-4 p-3 rounded-lg text-center @(isSuccess ? "bg-green-100/10" : "bg-red-100/10")">
                <p class="text-center text-sm" style="color: @(isSuccess ? "#4CAF50" : "#FF6B6B");">
                    @responseMessage
                </p>
            </div>
        }

        <div class="flex items-center justify-center mt-6">
            <span class="text-gray-400">Уже есть аккаунт?</span>
            <a href="/login" class="text-[#FF6B6B] hover:underline transition-all ml-2">Войти</a>
        </div>

    </div>
</div>

@code {
    [SupplyParameterFromForm]
    RegisterDto registerDto { get; set; } = new();
    private string responseMessage = "";
    private bool isSuccess = false;

    private async Task OnSubmitBtnClick()
    {
        try
        {
            var response = await http.PostAsJsonAsync("api/auth/register", registerDto);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                responseMessage = "✅ Пользователь успешно создан!";
                isSuccess = true;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Conflict) // 409: Пользователь уже существует
            {
                responseMessage = "❌ Пользователь с таким именем уже зарегистрирован";
                isSuccess = false;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest) // 400: Ошибка валидации
            {
                responseMessage = "❌ Ошибка: некорректные данные";
                isSuccess = false;
            }
            else
            {
                responseMessage = $"❌ Ошибка: {response.StatusCode}";
                isSuccess = false;
            }
        }
        catch (HttpRequestException)
        {
            responseMessage = "❌ Сервер не найден или нет соединения.";
            isSuccess = false;
        }
    }

    class RegisterDto
    {
        [Required(ErrorMessage = "Имя пользователя обязательно")]
        [StringLength(30, ErrorMessage = "Имя не должно превышать 30 символов")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Пароль обязателен")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Пароль должен быть от 6 до 100 символов")]
        public string? Password { get; set; }

        [Required(ErrorMessage = "Email обязателен")]
        [EmailAddress(ErrorMessage = "Некорректный формат Email")]
        public string? Email { get; set; }
    }
}