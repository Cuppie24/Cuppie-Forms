@page "/login"
@using System.ComponentModel.DataAnnotations
@inject HttpClient http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="flex items-center justify-center min-h-screen bg-[#121212]">
    <div class="relative bg-[#1E1E1E] p-8 rounded-3xl shadow-2xl max-w-md w-full">

        <h2 class="text-3xl font-bold text-center text-[#FF6B6B] mb-6">Вход</h2>

        <EditForm method="post" Model="loginDto" OnValidSubmit="OnSubmitBtnClick" FormName="create" Enhance class="space-y-5">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <InputText id="username" @bind-Value="loginDto.Username" placeholder="Имя пользователя"
                class="w-full p-4 border border-[#FF6B6B] rounded-xl bg-[#292929] text-white focus:ring-2 focus:ring-[#FF6B6B] placeholder-gray-400 transition-all" />
                <ValidationMessage For="@(() => loginDto.Username)" class="text-red-500 text-sm mt-1 block" />
            </div>
            <div class="mb-3">
                <InputText id="password" @bind-Value="loginDto.Password" placeholder="Пароль" type="password"
                class="w-full p-4 border border-[#FF6B6B] rounded-xl bg-[#292929] text-white focus:ring-2 focus:ring-[#FF6B6B] placeholder-gray-400 transition-all" />
                <ValidationMessage For="@(() => loginDto.Password)" class="text-red-500 text-sm mt-1 block" />
            </div>
            <button type="submit"
            class="w-full p-4 bg-[#FF6B6B] text-white rounded-xl hover:bg-[#E04E4E] hover:shadow-lg transition-all duration-300 font-medium">
                Войти
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(responseMessage))
        {
            <div class="mt-4 p-3 rounded-lg text-center @(isSuccess ? "bg-green-100/10" : "bg-red-100/10")">
                <p class="text-center text-sm" style="color: @(isSuccess ? "#4CAF50" : "#FF6B6B");">
                    @responseMessage
                </p>
            </div>
        }

        <div class="flex items-center justify-center mt-6">
            <span class="text-[#A0A0A0]">Нет аккаунта?</span>
            <a href="/register" class="text-[#FF6B6B] hover:underline transition-all ml-2">Зарегистрироваться</a>
        </div>

    </div>
</div>

@code {

    [SupplyParameterFromForm]
    LoginDto loginDto { get; set; } = new();

    private string? responseMessage { get; set; } = "";
    private bool isSuccess = false;
    private async Task OnSubmitBtnClick()
    {
        try
        {
            var response = await JS.InvokeAsync<ApiResponse>("sendApiRequest", "/api/auth/login", "POST", loginDto);

            if (response.Ok)
            {
                isSuccess = true;
                NavigationManager.NavigateTo("/");
            }
            else if (response.Status == 401) // Unauthorized
            {
                responseMessage = "❌ Неверное имя пользователя или пароль";
                isSuccess = false;
            }
            else if (response.Status == 400) // BadRequest
            {
                responseMessage = "❌ Ошибка: некорректные данные";
                isSuccess = false;
            }
            else if (response.Status == 403) // Forbidden
            {
                responseMessage = "❌ Доступ запрещен. Обратитесь к администратору.";
                isSuccess = false;
            }
            else if (response.Status == 404) // NotFound
            {
                responseMessage = "❌ Сервер авторизации недоступен";
                isSuccess = false;
            }
            else if (response.Status == 500) // InternalServerError
            {
                responseMessage = "❌ Внутренняя ошибка сервера. Попробуйте позже.";
                isSuccess = false;
            }
            else
            {
                responseMessage = $"❌ Ошибка: код {response.Status}";
                isSuccess = false;
            }
        }
        catch (JSException jsEx)
        {
            responseMessage = $"❌ Ошибка JavaScript: {jsEx.Message}";
            isSuccess = false;
        }
        catch (Exception ex)
        {
            responseMessage = $"❌ Неизвестная ошибка: {ex.Message}";
            isSuccess = false;
        }
    }

    class LoginDto
    {
        [Required(ErrorMessage = "Имя пользователя обязательно")]
        public string? Username { get; set; }
        [Required(ErrorMessage = "Пароль обязателен")]
        public string? Password { get; set; }
    }

    public class ApiResponse
    {
        public int Status { get; set; }
        public bool Ok { get; set; }
        public string Body { get; set; }
        public Dictionary<string, string> Headers { get; set; }
    }
}