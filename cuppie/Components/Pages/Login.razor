@page "/login"
@using System.ComponentModel.DataAnnotations
@inject HttpClient http

@rendermode InteractiveServer

<div class="flex items-center justify-center min-h-screen bg-[#121212]">
    <div class="relative bg-[#1E1E1E] p-8 rounded-3xl shadow-2xl max-w-md w-full transform transition-all duration-500 hover:scale-105">

        <h2 class="text-3xl font-bold text-center text-[#FF6B6B]">Вход</h2>

        <EditForm method="post" Model="loginDto" OnValidSubmit="OnSubmitBtnClick" FormName="create" Enhance class="mt-6 space-y-4">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <InputText id="username" @bind-Value="loginDto.Username" placeholder="Имя пользователя"
                class="w-full p-4 border border-[#FF6B6B] rounded-xl bg-[#292929] text-white focus:ring-2 focus:ring-[#FF6B6B] placeholder-gray-400 transition-all" />
                <ValidationMessage For="@(() => loginDto.Username)" class="text-red-500 text-sm" />
            </div>
            <div class="mb-3">
                <InputText id="password" @bind-Value="loginDto.Password" placeholder="Пароль" type="password"
                class="w-full p-4 border border-[#FF6B6B] rounded-xl bg-[#292929] text-white focus:ring-2 focus:ring-[#FF6B6B] placeholder-gray-400 transition-all" />
                <ValidationMessage For="@(() => loginDto.Password)" class="text-red-500 text-sm" />
            </div>
            <button type="submit"
            class="w-full p-4 bg-[#FF6B6B] text-white rounded-xl hover:bg-[#E04E4E] hover:shadow-lg transition-all duration-300">
                Войти
            </button>
        </EditForm>
        <p class="text-center text-sm mt-4"
           style="color: @(isSuccess ? "#4CAF50" : "#FF6B6B"); visibility: @(string.IsNullOrEmpty(responseMessage) ? "hidden" : "visible");">
            @responseMessage
        </p>

        <p class="text-center text-[#A0A0A0] mt-6">
            Нет аккаунта?
            <a href="/register" class="text-[#FF6B6B] hover:underline transition-all">Зарегистрироваться</a>
        </p>
       
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    LoginDto loginDto { get; set; } = new();
    private string? responseMessage { get; set; } = "";
    private bool isSuccess = false;
    private async Task OnSubmitBtnClick()
    {
        try
        {
            var response = await http.PostAsJsonAsync("api/auth/login", loginDto);
            if (response.IsSuccessStatusCode)
            {
                responseMessage = "Аутентификация успешна";
                isSuccess = true;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized) // 401: Неверный логин или пароль
            {
                responseMessage = "❌ Неверное имя пользователя или пароль";
                isSuccess = false;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest) // 400: Ошибка валидации
            {
                responseMessage = "❌ Ошибка: некорректные данные";
                isSuccess = false;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden) // 403: Доступ запрещен
            {
                responseMessage = "❌ Доступ запрещен. Обратитесь к администратору.";
                isSuccess = false;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound) // 404: API не найден
            {
                responseMessage = "❌ Сервер авторизации недоступен";
                isSuccess = false;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError) // 500: Ошибка сервера
            {
                responseMessage = "❌ Внутренняя ошибка сервера. Попробуйте позже.";
                isSuccess = false;
            }
            else
            {
                responseMessage = $"❌ Ошибка: {response.StatusCode}";
                isSuccess = false;
            }
        }
        catch (HttpRequestException)
        {
            responseMessage = "❌ Сервер не найден или нет соединения.";
        }

    }

    class LoginDto
    {
        [Required(ErrorMessage ="Имя пользователя обязательно")]
        public string? Username{ get; set; }
        [Required(ErrorMessage ="Пароль обязателен")]
        public string? Password{ get; set; }
    }
}
